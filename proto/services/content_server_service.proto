/*
  API Specification for the Decentraland Catalyst Server (BETA)

  A Catalyst is a Server that runs different services. These services currently work as the backbone for Decentraland and work in a decentralized network. The current specification details the following services: <br/><br/>- Archipelago <br/>- Content Server <br/>- Lambdas Service <br/> <br/>WARNING: We are working to close the version 1.0 of the Catalyst Protocol defined by this API. So far this is what we have and it's public but we are still working on refinement and during this process we may decided to deprecate or change some of the endpoints.

  The version of the OpenAPI document: 1.0

  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package openapitools.services.contentserverservice;

import "google/protobuf/empty.proto";
import public "models/audit_response.proto";
import public "models/available_content_inner.proto";
import public "models/entity.proto";
import public "models/error.proto";
import public "models/failed_deployments_inner.proto";
import public "models/get_active_entities_request.proto";
import public "models/get_challenge200_response.proto";
import public "models/get_entities_by_pointer_prefix200_response.proto";
import public "models/get_entity_ids_by_hash_id404_response.proto";
import public "models/pointer_changes.proto";
import public "models/post_entity200_response.proto";
import public "models/post_entity400_response.proto";
import public "models/snapshots_inner.proto";
import public "models/status_content.proto";

service ContentServerService {
  rpc GetActiveEntities (GetActiveEntitiesRequest) returns (GetActiveEntitiesResponse);

  rpc GetAvailableContent (GetAvailableContentRequest) returns (GetAvailableContentResponse);

  rpc GetChallenge (google.protobuf.Empty) returns (GetChallenge200Response);

  rpc GetContentFile (GetContentFileRequest) returns (GetContentFileResponse);

  rpc GetContentStatus (google.protobuf.Empty) returns (StatusContent);

  rpc GetEntitiesByPointerPrefix (GetEntitiesByPointerPrefixRequest) returns (GetEntitiesByPointerPrefix200Response);

  rpc GetEntityAuditInformation (GetEntityAuditInformationRequest) returns (AuditResponse);

  rpc GetEntityIdsByHashId (GetEntityIdsByHashIdRequest) returns (GetEntityIdsByHashIdResponse);

  rpc GetFailedDeployments (google.protobuf.Empty) returns (GetFailedDeploymentsResponse);

  rpc GetPointerChanges (GetPointerChangesRequest) returns (PointerChanges);

  rpc GetSnapshots (google.protobuf.Empty) returns (GetSnapshotsResponse);

  rpc HeadContentFile (HeadContentFileRequest) returns (google.protobuf.Empty);

  rpc PostEntity (PostEntityRequest) returns (PostEntity200Response);

}

message GetActiveEntitiesRequest {
  GetActiveEntitiesRequest getActiveEntitiesRequest = 1;

}

message GetActiveEntitiesResponse {
  repeated Entity data = 1;
}

message GetAvailableContentRequest {
  // Hash of the content file
  repeated string cid = 1;

}

message GetAvailableContentResponse {
  repeated AvailableContentInner data = 1;
}

message GetContentFileRequest {
  // Hash of the file to be retrieved, you can search for the hashId in the content section of a deployment. If the entity version greater than or equal to v4,  then the hashing algorithm will be IPFS, if the entity version is v3 or below then  it will be SHA-256
  string hashId = 1;

}

message GetContentFileResponse {
  string data = 1;
}

message GetEntitiesByPointerPrefixRequest {
  // urn prefix to filter the entities by
  string collectionUrn = 1;
  // Page size (max 1000)
  float pageSize = 2;
  // Page number (default: 1)
  float pageNumber = 3;

}

message GetEntityAuditInformationRequest {
  // Specify the type of entity to audit
  string entityType = 1;
  // id of the entity
  string entityId = 2;

}

message GetEntityIdsByHashIdRequest {
  // Hash of the content file
  string hashId = 1;

}

message GetEntityIdsByHashIdResponse {
  repeated string data = 1;
}

message GetFailedDeploymentsResponse {
  repeated FailedDeploymentsInner data = 1;
}

message GetPointerChangesRequest {
  // Acts as a filter in the collection of deployments, this value is the minimum value of local timestamp that any deployment in the collection will have.
  int32 from = 1;
  // Acts as a filter in the collection of deployments, this value is the maximum value of local timestamp that any deployment in the collection will have.
  int32 to = 2;
  // It is the last entity id that was visited, so it will be skipped when showing current page.
  string lastId = 3;
  // The deployments are a paginated collection, this parameter corresponds to the limit for each page. The default value is 500.
  int32 limit = 4;
  // The type of entities that will be shown in the collection, many values can be sent. Valid values are: profile, scene and wearable.
  string entityType = 5;
  // This value is used as the field to order all the deployments in the collection. If no parameter is sent, then the default field to order with will be local_timestamp.
  string sortingField = 6;
  // This value is used as the order for all the deployments in the collection. If no parameter is sent, then the default field to order with will be DESC.
  string sortingOrder = 7;

}

message GetSnapshotsResponse {
  repeated SnapshotsInner data = 1;
}

message HeadContentFileRequest {
  // Hash of the file to be checked
  string hashId = 1;

}

message PostEntityRequest {
  repeated string files = 1;
  string entityId = 2;
  string authChain = 3;
  string ethAddress = 4;
  string signature = 5;

}

